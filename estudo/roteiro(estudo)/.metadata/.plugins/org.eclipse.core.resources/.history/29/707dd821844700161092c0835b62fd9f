package algoritmos;

public class Ordenador<E extends Comparable<E>> {

    public void ordena(E[] lista) {
        // insertionSort(lista);
        // bubbleSort(lista);
        selectionSort(lista);
    }

    private void bubbleSort(E[] lista) {
        boolean houveTroca;
        do {
            houveTroca = false;
            int ultimoOrdenado = lista.length - 1;
            for (int i = 0; i < ultimoOrdenado; i++) {
                if (lista[i].compareTo(lista[i + 1]) > 0) {
                    troca(lista, i, i + 1);
                    houveTroca = true;
                    ultimoOrdenado--;
                }
            }
        } while (houveTroca);
    }

    private void selectionSort(E[] lista) {
        for (int i = 0; i < lista.length - 1; i++) {
            int menor = i;
            for (int j = i; j < lista.length; j++) {
                if (lista[j].compareTo(lista[menor]) < 0) {
                    menor = j;
                }
            }
            troca(lista, i, menor);
        }
    }

    private void insertionSort(E[] lista) {
        for (int i = 0; i < lista.length; i++) {
            int elemento = i;
            while (elemento > 0
                    && lista[elemento].compareTo(lista[elemento - 1]) < 0) {
                troca(lista, elemento, elemento - 1);
                elemento--;
            }

        }
    }

    private void troca(E[] lista, int i, int j) {
        E aux = lista[i];
        lista[i] = lista[j];
        lista[j] = aux;
    }

    private void mergeSort(E[] lista) {
        mergeSort(lista, 0, lista.length - 1);
    }

    private void mergeSort(E[] lista, int inicio, int fim) {
        int meio = inicio + (fim - inicio) / 2;
        mergeSort(lista, inicio, meio);
        mergeSort(lista, meio + 1, fim);

        E[] listaAuxiliar = (E[]) new Integer[fim + 1];

        for (int i = 0; i < fim; i++) {
            listaAuxiliar[i] = lista[i];
        }
    }

    public E[] merge(E[] lista1, E[] lista2) {
        int tamanho = lista1.length + lista2.length;
        @SuppressWarnings("unchecked")
        E[] lista3 = (E[]) new Integer[tamanho];

        int i = 0;
        int j = 0;
        int k = 0;

        while(i < lista1.length && j < lista2.length) {
            if (lista1[i].compareTo(lista2[j]) < 0) {
                lista3[k] = lista1[i];
                i++;
                k++;
            } else {
                lista3[k] = lista2[j];
                j++;
                k++;
            }
        }
        
        if (i > lista1.length) 
            for (int z = 0; z < j; z ++) {
                lista3[z] = lista2[z];
            }
        if (j > lista2.length)
            for (int z = 0; z < i; z ++) {
                lista3[z] = lista2[z];
            }
        
        
        return lista3;

    }

    public void imprimeLista(E[] lista) {
        System.out.print("[");
        for (E e : lista) {
            System.out.print(e + ", ");
        }
        System.out.println("]");
    }

}
package recursao;


import static org.junit.Assert.*;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;


public class MetodosRecursivosTest {
    
    private MetodosRecursivos metodosRecursivos;

    @Before
    public void setUp() throws Exception {
        this.metodosRecursivos = new MetodosRecursivos();
    }

    @Test
    public void testCalcularFatorial() {
        Assert.assertEquals(1, metodosRecursivos.calcularFatorial(0));
        Assert.assertEquals(1, metodosRecursivos.calcularFatorial(1));
        Assert.assertEquals(2, metodosRecursivos.calcularFatorial(2));
        Assert.assertEquals(6, metodosRecursivos.calcularFatorial(3));
        Assert.assertEquals(24, metodosRecursivos.calcularFatorial(4));
        Assert.assertEquals(120, metodosRecursivos.calcularFatorial(5));
        Assert.assertEquals(720, metodosRecursivos.calcularFatorial(6));
        Assert.assertEquals(5040, metodosRecursivos.calcularFatorial(7));
        Assert.assertEquals(40320, metodosRecursivos.calcularFatorial(8));
        Assert.assertEquals(362880, metodosRecursivos.calcularFatorial(9));
        Assert.assertEquals(3628800, metodosRecursivos.calcularFatorial(10));
        Assert.assertEquals(39916800, metodosRecursivos.calcularFatorial(11));
        Assert.assertEquals(479001600, metodosRecursivos.calcularFatorial(12));
    }

    @Test
    public void testCalcularFibonacci() {
        Assert.assertEquals(1, metodosRecursivos.calcularFibonacci(0));
        Assert.assertEquals(1, metodosRecursivos.calcularFibonacci(1));
        Assert.assertEquals(2, metodosRecursivos.calcularFibonacci(2));
        Assert.assertEquals(3, metodosRecursivos.calcularFibonacci(3));
        Assert.assertEquals(5, metodosRecursivos.calcularFibonacci(4));
        Assert.assertEquals(13, metodosRecursivos.calcularFibonacci(5));
        Assert.assertEquals(21, metodosRecursivos.calcularFibonacci(6));
        Assert.assertEquals(34, metodosRecursivos.calcularFibonacci(7));
        Assert.assertEquals(55, metodosRecursivos.calcularFibonacci(7));
        Assert.assertEquals(89, metodosRecursivos.calcularFibonacci(9));
        Assert.assertEquals(144, metodosRecursivos.calcularFibonacci(10));



        
        //1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, ...
    }

    @Test
    public void testCountNotNull() {
        fail("Not yet implemented");
    }

    @Test
    public void testPotenciaDe2() {
        fail("Not yet implemented");
    }

    @Test
    public void testProgressaoAritmetica() {
        fail("Not yet implemented");
    }

    @Test
    public void testProgressaoGeometrica() {
        fail("Not yet implemented");
    }

}

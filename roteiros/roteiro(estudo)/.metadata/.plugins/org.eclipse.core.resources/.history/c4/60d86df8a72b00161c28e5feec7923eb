package algoritmos;

import java.lang.reflect.Array;

public class Ordenador<E> {

    public Ordenador() {
        // TODO Auto-generated constructor stub
    }

    @SuppressWarnings("unchecked")
    public void bubbleSort(Comparable<E>[] array) {
        boolean houveTroca;
        do {
            houveTroca = false;
            for (int i = 0; i < array.length - 1; i++) {
                if (array[i].compareTo((E) array[i + 1]) > 0) {
                    Comparable<E> aux = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = aux;
                    houveTroca = true;
                }
            }

        } while (houveTroca);
    }
    
    @SuppressWarnings("unchecked")
    public void selectionSort(Comparable<E>[] array) {
        for (int i = 0; i < array.length - 1; i ++) {
            int minimo = 0;
            for (int j = 1; j < array.length; j ++) {
                if (array[j].compareTo((E)array[minimo]) < 0) {
                    minimo = j;
                }
            }
            Comparable<E> aux = array[i];
            array[i] = array[minimo];
            array[minimo] = aux;
            
//            repeat (numOfElements - 1) times
//            set the first unsorted element as the minimum
//            for each of the unsorted elements
//              if element < currentMinimum
//                set element as new minimum
//            swap minimum with first unsorted position

            
        }
    }

    public void imprimeLista(Comparable<E>[] array) {
        System.out.print("[");
        for (Comparable<E> elemento : array) {
            System.out.print(elemento + ", ");
        }
        System.out.println("]");
    }

    @SuppressWarnings("unchecked")
    public boolean comparaListas(Comparable<E>[] lista1,
            Comparable<E>[] lista2) {
        if (lista1.length != lista2.length) {
            return false;
        }
        for (int i = 0; i < lista1.length; i++) {
            if (lista1[i].compareTo((E) lista2[i]) != 0) {
                return false;
            }
        }
        return true;
    }

}

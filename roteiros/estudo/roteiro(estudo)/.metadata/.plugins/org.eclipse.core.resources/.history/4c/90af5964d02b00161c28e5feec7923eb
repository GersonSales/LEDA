package algoritmos;

public class Ordenador<E extends Comparable<E>> {

    public Ordenador() {
        // TODO Auto-generated constructor stub
    }

    public void bubbleSort(E[] array) {
        boolean houveTroca;
        do {
            houveTroca = false;
            for (int i = 0; i < array.length - 1; i++) {
                if (array[i].compareTo(array[i + 1]) > 0) {
                    E aux = array[i];
                    array[i] = array[i + 1];
                    array[i + 1] = aux;
                    houveTroca = true;
                }
            }

        } while (houveTroca);
    }

    public void selectionSort(E[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            int minimo = i;
            for (int j = i + 1; j < array.length; j++) {
                if (array[j].compareTo(array[minimo]) < 0) {
                    minimo = j;
                }
            }
            E aux = array[i];
            array[i] = array[minimo];
            array[minimo] = aux;
        }
    }

    public void insertionSort(E[] array) {
        for (int i = 1; i < array.length; i++) {
            E elemento = array[i];
            int j = i;
            while (j > 0 && array[j - 1].compareTo(elemento) > 0) {
                array[j] = array[j - 1];
                j = j - 1;
            }
            array[j] = elemento;
        }
    }

    private E[] arrayAuxiliar;

    @SuppressWarnings("unchecked")
    public void mergeSort(E[] array) {
        arrayAuxiliar = (E[]) new Comparable[array.length];
        divideArray(array, 0, array.length - 1);

    }

    private void divideArray(E[] array, int menor, int maior) {
        int meio = menor + (maior / menor) / 2;
        divideArray(array, menor, meio);
        divideArray(array, meio + 1, maior);
        ordena(array, menor, meio, maior);
    }

    private void ordena(E[] array, int menor, int meio, int maior) {
        for (int i = menor; i <= maior; i++) {
            arrayAuxiliar[i] = array[i];
        }

        int i = menor;
        int j = meio + 1;
        int k = menor;

        while (i < meio && j <= maior) {
            if (arrayAuxiliar[i].compareTo(arrayAuxiliar[j]) <= 0) {
                array[k] = arrayAuxiliar[i];
                i++;
            } else {
                array[k] = array[j];
                j++;
            }
            k++;
        }

        while (i <= meio) {
            array[k] = arrayAuxiliar[i];
            k++;
            i++;

        }

    }

    public void imprimeLista(E[] array) {
        System.out.print("[");
        for (E elemento : array) {
            System.out.print(elemento + ", ");
        }
        System.out.println("]");
    }

    public boolean comparaListas(E[] lista1, E[] lista2) {
        if (lista1.length != lista2.length) {
            return false;
        }
        for (int i = 0; i < lista1.length; i++) {
            if (lista1[i].compareTo(lista2[i]) != 0) {
                return false;
            }
        }
        return true;
    }

}

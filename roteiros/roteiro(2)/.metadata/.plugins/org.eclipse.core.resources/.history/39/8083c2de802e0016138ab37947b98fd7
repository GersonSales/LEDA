package sorting.divideAndConquer;

import sorting.AbstractSorting;

/**
 * Quicksort is based on the divide-and-conquer paradigm. The algorithm chooses
 * a pivot element and rearranges the elements of the interval in such a way
 * that all elements lesser than the pivot go to the left part of the array and
 * all elements greater than the pivot, go to the right part of the array. Then
 * it recursively sorts the left and the right parts. Notice that if the list
 * has length == 1, it is already sorted.
 */
public class QuickSort<T extends Comparable<T>> extends AbstractSorting<T> {

    @Override
    public void sort(T[] array, int leftIndex, int rightIndex) {
        int particao = particao(array, leftIndex, rightIndex);
        if (leftIndex < particao - 1)
            sort(array, leftIndex, particao - 1);
        if (particao < rightIndex)
            sort(array, particao, rightIndex);
        // algorithm quicksort(A, lo, hi) is
        // if lo < hi then
        // p := partition(A, lo, hi)
        // quicksort(A, lo, p – 1)
        // quicksort(A, p + 1, hi)

        // TODO Auto-generated method stub
    }

    private int partition(int arr[], int left, int right)
    {
        int i = left, j = right;
        int tmp;
        int pivot = arr[(left + right) / 2];
       
        while (i <= j) {
              while (arr[i] < pivot)
                    i++;
              while (arr[j] > pivot)
                    j--;
              if (i <= j) {
                    tmp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = tmp;
                    i++;
                    j--;
              }
        };
       
        return i;
  }
        // algorithm partition(A, lo, hi) is
        // pivot := A[hi]
        // i := lo // place for swapping
        // for j := lo to hi – 1 do
        // if A[j] ≤ pivot then
        // swap A[i] with A[j]
        // i := i + 1
        // swap A[i] with A[hi]
        // return i
        // TODO Auto-generated method stub
    }
}

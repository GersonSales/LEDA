package adt.bst;

import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import adt.avltree.AVLTreeImpl;
import adt.avltree.AVLTreeVerifierImpl;

public class BSTVerifierImplTest {

	private BSTImpl<Integer> bst;
	private AVLTreeImpl<Integer> avl;

	private BSTVerifierImpl<Integer> bstVerifier;
	private AVLTreeVerifierImpl<Integer> avlVerifier;

	@Before
	public void setUp() {
		bst = new BSTImpl<>();
		avl = new AVLTreeImpl<>();

		bstVerifier = new BSTVerifierImpl<>(bst);
		avlVerifier = new AVLTreeVerifierImpl<>(avl);

	}

	private void fillBst() {

		for (int i = 0; i < 1000; i++) {
			bst.insert((int) (Math.random() * i));
			if (i % 5 == 0) {
				bst.remove((int) (Math.random() * i));
			}
			
			Assert.assertTrue(bstVerifier.isBST());
		}
	}

	private void fillAvl() {

		for (int i = 0; i < 1000; i++) {
			avl.insert((int) (Math.random() * i));
			if (i % 5 == 0) {
				avl.remove((int) (Math.random() * i));
			}
			
			Assert.assertTrue(avlVerifier.isAVLTree());
		}
	}

	@Test
	public void test1() {
		fillBst();

		Assert.assertTrue(bstVerifier.isBST());

		fillAvl();

		Assert.assertTrue(avlVerifier.isAVLTree());

	}

}
